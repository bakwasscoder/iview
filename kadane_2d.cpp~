//Kadane's 2D algo
#include <iostream>
#include <vector>
using namespace std;
void kadane_1d(vector<int>v, int &st, int &en, int& max_sum) {
    int tmp_st = 0, curr_sum = 0;
    st = en = max_sum = 0;
    for (unsigned int i=0;i<v.size();i++) {
        curr_sum += v[i];
        if (curr_sum < 0) {
            curr_sum = 0;
            tmp_st = i+1;
            continue;
        }
        if (curr_sum > max_sum) {
            max_sum = curr_sum;
            st = tmp_st;
            en = i;
        }
    }
}

void kadane_2d(vector< vector<int> >input, int &st_x, int& st_y, int& en_x, int& en_y, int& max_sum) {
    int rows = input.size(), cols = input[0].size(), st=0, en=0;
    max_sum = 0;
    int curr_sum = 0;
    vector<int>tmp; //pre computed sum
    for (int i=0;i<rows;i++) {   //For start row of final submatrix
        for (int k=0;k<cols;k++) {
            tmp.push_back(0);
        }
        for(int j=i;j<rows;j++) {  //For end row of final submatrix
            for (int k=0;k<cols;k++) {
                tmp[k] += input[j][k];
            }
            kadane_1d(tmp, st, en, curr_sum);
            if (curr_sum > max_sum) {
                max_sum = curr_sum;
                st_x = i;
                st_y = st;
                en_x = j;
                en_y = en;
            }
        }    
    }
}
#define ROWS 4
#define COLS 8

int main() {
    int arr[ROWS][COLS] =
    {
        {1, 2, 3, 4, 5,  6,  7,  8},
        {1, 2, 3, 4, 9, 10, 11, 12},
        {1, 2, 5, 6, 9, 10, 13, 14},
        {1, 3, 5, 7, 9, 11, 13, 15},
    };

    vector< vector<int> > input(4, vector<int>(8));
    for (int i = 0; i < ROWS; ++i) {
        input[i].assign(arr[i], arr[i] + COLS);
    }
    int st_x, st_y, en_x, en_y, sum;
    st_x = st_y = en_x = en_y = sum = 0;
    kadane_2d(input,st_x, st_y, en_x, en_y, sum);
    cout<<st_x<<endl;
    cout<<st_y<<endl;
    cout<<en_x<<endl;
    cout<<en_y<<endl;
    cout<<"sum = "<<sum<<endl;
    for (int i=st_x;i<=en_x;i++) {
        for (int j=st_y;j<=en_y;j++){
            cout<<input[i][j]<<"  ";
        }
        cout<<endl;
    }
}

